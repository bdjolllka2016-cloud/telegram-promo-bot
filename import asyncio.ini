import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
from datetime import datetime

TOKEN = "8442006569:AAEH03mtwRrRj0-fkFXXm7j73AXmoGK1VD4"
ADMIN_ID = 5597660360  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram user_id

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# --- –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("data/bot.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    subscribed_at TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS answers (
    user_id INTEGER PRIMARY KEY,
    q1 TEXT,
    q2 TEXT,
    q3 TEXT,
    q4 TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS promocodes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code TEXT,
    description TEXT,
    discount INTEGER,
    start_date TEXT,
    end_date TEXT,
    active INTEGER DEFAULT 1
)
""")
conn.commit()

# --- —à–∞–≥–∏ –æ–ø—Ä–æ—Å–∞ ---
user_steps = {}

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    now = datetime.utcnow().isoformat()

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, subscribed_at) VALUES (?, ?, ?)",
                   (user_id, username, now))
    conn.commit()

    user_steps[user_id] = {"step": 1, "answers": {}}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä—É–ª–æ–Ω–æ–≤ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?")

@dp.message_handler()
async def handle_answers(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_steps:
        return

    step = user_steps[user_id]["step"]

    if step == 1:
        user_steps[user_id]["answers"]["q1"] = message.text
        user_steps[user_id]["step"] = 2
        await message.answer("2Ô∏è‚É£ –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?")

    elif step == 2:
        user_steps[user_id]["answers"]["q2"] = message.text
        user_steps[user_id]["step"] = 3
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–î–∞", "–ù–µ—Ç")
        await message.answer("3Ô∏è‚É£ –ù—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?", reply_markup=kb)

    elif step == 3:
        user_steps[user_id]["answers"]["q3"] = message.text
        user_steps[user_id]["step"] = 4
        await message.answer("4Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∞—Ä—Ç–∏–∫—É–ª ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ. –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–ª–∞–¥.", reply_markup=types.ReplyKeyboardRemove())

    elif step == 4:
        user_steps[user_id]["answers"]["q4"] = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
        ans = user_steps[user_id]["answers"]
        cursor.execute("INSERT OR REPLACE INTO answers (user_id, q1, q2, q3, q4) VALUES (?, ?, ?, ?, ?)",
                       (user_id, ans["q1"], ans["q2"], ans["q3"], ans["q4"]))
        conn.commit()

        del user_steps[user_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute("SELECT code, description, discount, end_date FROM promocodes WHERE active = 1 ORDER BY id DESC LIMIT 1")
        promo = cursor.fetchone()

        if promo:
            code, description, discount, end_date = promo
            await message.answer(
                f"üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>\n{description}\n–°–∫–∏–¥–∫–∞: <b>{discount}%</b>\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}"
            )
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")

# --- –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---

@dp.message_handler(commands=['newcode'])
async def cmd_newcode(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newcode –∫–æ–¥;–æ–ø–∏—Å–∞–Ω–∏–µ;—Å–∫–∏–¥–∫–∞;–¥–∞—Ç–∞–∑–∞–∫–∏–Ω—á–∞–Ω–∏—è(YYYY-MM-DD)")
        return
    try:
        code, description, discount, end_date = [x.strip() for x in parts[1].split(";")]
        discount = int(discount)
        start_date = datetime.utcnow().date().isoformat()

cursor.execute("INSERT INTO promocodes (code, description, discount, start_date, end_date, active) VALUES (?, ?, ?, ?, ?, 1)",
                       (code, description, discount, start_date, end_date))
        conn.commit()

        await message.answer("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        for (uid,) in users:
            try:
                await bot.send_message(uid, f"üéâ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>\n{description}\n–°–∫–∏–¥–∫–∞: {discount}%\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}")
            except:
                pass

    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ.")

@dp.message_handler(commands=['endcode'])
async def cmd_endcode(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        promo_id = int(message.text.split(" ")[1])
        cursor.execute("UPDATE promocodes SET active = 0 WHERE id = ?", (promo_id,))
        conn.commit()
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID.")

if name == "main":
    executor.start_polling(dp, skip_updates=True)