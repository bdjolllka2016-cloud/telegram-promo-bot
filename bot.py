from dotenv import load_dotenv
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
import os

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
import asyncio
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
import os

# --- –∫–æ–Ω—Ñ–∏–≥ ---
TOKEN = os.getenv("TOKEN")  # –í–∞—à Telegram Bot Token
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
PROMO_CODE = "TGBOT6"
PROMO_DISCOUNT = 6
PROMO_END = "01.11.2025"
PROMO_IMAGE = os.path.join(os.path.dirname(__file__), "promo.jpg")  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ

# --- –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("bot.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    phone TEXT,
    subscribed_at TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS answers (
    user_id INTEGER PRIMARY KEY,
    q1 TEXT,
    q2 TEXT,
    q3 TEXT,
    q4 TEXT
)
""")
conn.commit()

# --- —à–∞–≥–∏ –æ–ø—Ä–æ—Å–∞ ---
user_steps = {}

# --- –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()  # <- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    now = datetime.utcnow().isoformat()

    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name, subscribed_at) VALUES (?, ?, ?, ?)",
        (user_id, username, first_name, now)
    )
    conn.commit()

    user_steps[user_id] = {"step": 1, "answers": {}}

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä—É–ª–æ–Ω–æ–≤ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?"
    )

@dp.message()
async def handle_answers(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_steps:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    step = user_steps[user_id]["step"]

    # --- —à–∞–≥ 1 ---
    if step == 1:
        user_steps[user_id]["answers"]["q1"] = message.text
        user_steps[user_id]["step"] = 2
        await message.answer("2Ô∏è‚É£ –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∞?")

    # --- —à–∞–≥ 2 ---
    elif step == 2:
        user_steps[user_id]["answers"]["q2"] = message.text
        user_steps[user_id]["step"] = 3
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
            resize_keyboard=True
        )
        await message.answer("3Ô∏è‚É£ –ù—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è?", reply_markup=kb)

    # --- —à–∞–≥ 3 ---
    elif step == 3:
        user_steps[user_id]["answers"]["q3"] = message.text
        user_steps[user_id]["step"] = 4
        await message.answer(
            "4Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∞—Ä—Ç–∏–∫—É–ª ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ. –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–ª–∞–¥.",
            reply_markup=ReplyKeyboardRemove()
        )

    # --- —à–∞–≥ 4 ---
    elif step == 4:
        user_steps[user_id]["answers"]["q4"] = message.text
        user_steps[user_id]["step"] = 5

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        contact_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        skip_button = KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        kb = ReplyKeyboardMarkup(keyboard=[[contact_button, skip_button]], resize_keyboard=True)
        await message.answer("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:", reply_markup=kb)

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    phone = message.contact.phone_number
    cursor.execute("UPDATE users SET phone = ? WHERE user_id = ?", (phone, user_id))
    conn.commit()
    await finalize_user(user_id, message)

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ ---
@dp.message()
async def handle_skip(message: types.Message):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_id = message.from_user.id
        await finalize_user(user_id, message)

# --- —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –∞–¥–º–∏–Ω—É ---
async def finalize_user(user_id, message):
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!", reply_markup=ReplyKeyboardRemove())

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã ---
    ans = user_steps.get(user_id, {}).get("answers", {})
    cursor.execute(
        "INSERT OR REPLACE INTO answers (user_id, q1, q2, q3, q4) VALUES (?, ?, ?, ?, ?)",
        (user_id, ans.get("q1"), ans.get("q2"), ans.get("q3"), ans.get("q4"))
    )
    conn.commit()
    if user_id in user_steps:
        del user_steps[user_id]

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ---
    try:
        photo = InputFile(PROMO_IMAGE)
        await message.answer_photo(
            photo=photo,
            caption=f"üéÅ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <b>{PROMO_CODE}</b>\n–°–∫–∏–¥–∫–∞: <b>{PROMO_DISCOUNT}%</b>\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {PROMO_END}"
        )
    except:
        await message.answer(f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {PROMO_CODE} ({PROMO_DISCOUNT}% –¥–æ {PROMO_END})")

    # --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ---
    cursor.execute("SELECT first_name, username, phone FROM users WHERE user_id = ?", (user_id,))
    user_info = cursor.fetchone()
    first_name = user_info[0] if user_info else ""
    username = f"@{user_info[1]}" if user_info and user_info[1] else ""
    phone = user_info[2] if user_info and user_info[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    await bot.send_message(
        ADMIN_ID,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å!\n–ò–º—è: {first_name}\nUsername: {username}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

# --- –∑–∞–ø—É—Å–∫ ---
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
